/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package main;

import java.net.URL;
import java.util.ArrayList;

import javax.swing.ImageIcon;

import grafos.Aresta;
import grafos.ReturnAGM;
import grafos.ReturnBFS;
import grafos.ReturnDFS;
import grafos.TipoDeAresta;
import grafos.Vertice;

/**
 *
 * @author natha
 */
public class TelaResultado extends javax.swing.JFrame {

	/**
	 * Creates new form TelaResultado
	 */

	Algoritmos algoritmos;
	long tempoConstruirGrafo;

	public TelaResultado(Algoritmos algoritmos, long tempo) {
		this.algoritmos = algoritmos;
		this.tempoConstruirGrafo = System.currentTimeMillis() - tempo;
		initComponents();
		URL iconURL = getClass().getResource("/img/logoIF.png");
		ImageIcon icon = new ImageIcon(iconURL);
		this.setIconImage(icon.getImage());
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		buttonGroup1 = new javax.swing.ButtonGroup();
		jPanel1 = new javax.swing.JPanel();
		jLabel1 = new javax.swing.JLabel();
		agm = new javax.swing.JRadioButton();
		dfs = new javax.swing.JRadioButton();
		cm = new javax.swing.JRadioButton();
		bfs = new javax.swing.JRadioButton();
		jLabel2 = new javax.swing.JLabel();
		jLabel3 = new javax.swing.JLabel();
		terminal = new javax.swing.JScrollPane();
		painel = new javax.swing.JTextArea();
		vo = new java.awt.Choice();
		vd = new java.awt.Choice();
		ok = new javax.swing.JButton();
		fm = new javax.swing.JRadioButton();

		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
		setTitle("Grafo");
		setMaximumSize(new java.awt.Dimension(804, 482));
		setMinimumSize(new java.awt.Dimension(804, 482));
		setResizable(false);

		jPanel1.setBackground(new java.awt.Color(204, 204, 204));
		jPanel1.setToolTipText("");
		jPanel1.setName(""); // NOI18N

		jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/neural-network.png"))); // NOI18N

		agm.setBackground(new java.awt.Color(204, 204, 204));
		buttonGroup1.add(agm);
		agm.setText("AGM");
		agm.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				agmActionPerformed(evt);
			}
		});

		dfs.setBackground(new java.awt.Color(204, 204, 204));
		buttonGroup1.add(dfs);
		dfs.setText("DFS");
		dfs.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				dfsActionPerformed(evt);
			}
		});

		cm.setBackground(new java.awt.Color(204, 204, 204));
		buttonGroup1.add(cm);
		cm.setText("Caminho Mínimo");
		cm.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				cmActionPerformed(evt);
			}
		});

		bfs.setBackground(new java.awt.Color(204, 204, 204));
		buttonGroup1.add(bfs);
		bfs.setText("BFS");
		bfs.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				bfsActionPerformed(evt);
			}
		});

		jLabel2.setText("Vértice origem");

		jLabel3.setText("Vértice Destino");

		terminal.setBackground(new java.awt.Color(204, 204, 204));

		painel.setBackground(new java.awt.Color(240, 240, 240));
		painel.setColumns(20);
		painel.setRows(5);
		terminal.setViewportView(painel);

		ok.setText("OK");
		ok.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				okActionPerformed(evt);
			}
		});

		fm.setBackground(new java.awt.Color(204, 204, 204));
		buttonGroup1.add(fm);
		fm.setText("Fluxo Máximo");
		fm.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				fmActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
		jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel1Layout.createSequentialGroup().addContainerGap().addComponent(terminal)
						.addContainerGap())
				.addGroup(jPanel1Layout.createSequentialGroup().addGap(53, 53, 53).addGroup(jPanel1Layout
						.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(jPanel1Layout.createSequentialGroup().addGroup(jPanel1Layout
								.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
								.addGroup(jPanel1Layout.createSequentialGroup().addGap(276, 276, 276).addComponent(ok,
										javax.swing.GroupLayout.PREFERRED_SIZE, 64,
										javax.swing.GroupLayout.PREFERRED_SIZE))
								.addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
										jPanel1Layout.createSequentialGroup().addComponent(fm)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
														javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
												.addComponent(jLabel1)))
								.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
						.addGroup(jPanel1Layout.createSequentialGroup()
								.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(agm).addComponent(cm))
								.addGap(37, 37, 37)
								.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(bfs).addComponent(dfs))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 260,
										Short.MAX_VALUE)
								.addGroup(jPanel1Layout
										.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
										.addGroup(jPanel1Layout.createSequentialGroup().addComponent(jLabel3)
												.addGap(20, 20, 20).addComponent(vd,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
										.addGroup(jPanel1Layout.createSequentialGroup().addComponent(jLabel2)
												.addGap(22, 22, 22).addComponent(vo,
														javax.swing.GroupLayout.PREFERRED_SIZE, 63,
														javax.swing.GroupLayout.PREFERRED_SIZE)))
								.addGap(111, 111, 111)))));
		jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel1Layout.createSequentialGroup().addGroup(jPanel1Layout
						.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(jPanel1Layout.createSequentialGroup().addGroup(jPanel1Layout
								.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(jPanel1Layout.createSequentialGroup().addGap(21, 21, 21).addComponent(jLabel1)
										.addGap(15, 15, 15))
								.addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
										jPanel1Layout.createSequentialGroup().addContainerGap().addComponent(fm)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
								.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
										.addComponent(agm).addComponent(dfs))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
										.addComponent(cm).addComponent(bfs).addComponent(ok)))
						.addGroup(jPanel1Layout.createSequentialGroup().addGap(100, 100, 100)
								.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(jLabel2).addComponent(vo, javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(jLabel3).addComponent(vd, javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE))))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
						.addComponent(terminal, javax.swing.GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE)
						.addContainerGap()));

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(
				jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(
				jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));

		jPanel1.setToolTipText(null);

		pack();
		setLocationRelativeTo(null);
	}// </editor-fold>

	private void okActionPerformed(java.awt.event.ActionEvent evt) {
		painel.setText(null);
		if (agm.isSelected()) {
			long tempoAgm = System.currentTimeMillis();
			ReturnAGM r = algoritmos.agmUsandoKruskall();
			tempoAgm = System.currentTimeMillis() - tempoAgm;
			int tam = r.getA().size();
			ArrayList<Aresta> a = r.getA();
			long custo = 0;
			int[] quantArestas = r.getTam();
			int quantAtual = quantArestas == null ? -1 : quantArestas[0], count = 1;
			for (int i = 0; i < tam; i++) {

				if (i == quantAtual) {
					quantAtual = count < quantArestas.length ? quantArestas[count++] : -1;
					painel.append(count + "°Árvore\n");
				}

				custo += a.get(i).peso();
				painel.append("Origem: " + a.get(i).origem().id() + "\nDestino: " + a.get(i).destino().id() + "\nPeso: "
						+ a.get(i).peso() + "\n\n");
			}
			if (!r.getIdVerticeSemLig().isEmpty()) {
				painel.append(
						"Floresta foi gerada, os vértices a seguir não possuem conexão com nenhum outro vértice: ");
				for (int id : r.getIdVerticeSemLig())
					painel.append(id + ", ");
				painel.append("\n");
			}
			painel.append("Custo da AGM: " + custo + "\n" + "Tempo: " + (tempoAgm + tempoConstruirGrafo) + " mS");
		} else if (cm.isSelected()) {
			int origem = vo.getSelectedIndex();
			int destino = vd.getSelectedIndex();
			long tempoCm = System.currentTimeMillis();
			ArrayList<Aresta> r;
			try {
				r = algoritmos.caminhoMaisCurto(origem, destino);
				tempoCm = System.currentTimeMillis() - tempoCm;
				int tam = r.size();
				long custo = 0;
				for (int i = 0; i < tam; i++) {
					custo += r.get(i).peso();
					painel.append("Origem: " + r.get(i).origem().id() + "\nDestino: " + r.get(i).destino().id()
							+ "\nPeso: " + r.get(i).peso() + "\n\n");
				}
				painel.append(
						"Custo do caminho: " + custo + "\n" + "Tempo: " + (tempoCm + tempoConstruirGrafo) + " mS");
			} catch (Exception e) {
				painel.append("Não existe caminho entre origem e destino informados");
			}
		} else if (bfs.isSelected()) {
			int origem = vo.getSelectedIndex();
			long tempoBfs = System.currentTimeMillis();
			ReturnBFS r = algoritmos.buscaEmLargura(origem);
			tempoBfs = System.currentTimeMillis() - tempoBfs;
			int tam = r.getId().length;
			Vertice[] pai = r.getPai();
			int[] id = r.getId();
			int[] d = r.getD();
			for (int i = 0; i < tam; i++) {
				String idPai = pai[i] == null ? "-" : Integer.toString(pai[i].id());
				painel.append("Vértice: " + id[i] + "\nD: " + d[i] + "\nPai: " + idPai + "\n\n");
			}
			painel.append("Tempo: " + (tempoBfs + tempoConstruirGrafo) + " mS");
		} else if (dfs.isSelected()) {
			int origem = vo.getSelectedIndex();
			long tempoDfs = System.currentTimeMillis();
			ReturnDFS r = algoritmos.buscaEmProfundidade(origem);
			tempoDfs = System.currentTimeMillis() - tempoDfs;
			int tam = r.getD().length;
			Aresta[] a = r.getArestas();
			int[] d = r.getD(), f = r.getF();
			TipoDeAresta[] ta = r.getT();

			for (int i = 0; i < tam; i++) {
				painel.append("Vértice: " + i + "\nD: " + d[i] + "\nF: " + f[i] + "\n\n");
			}
			tam = a.length;
			for (int i = 0; i < tam; i++) {
				painel.append("Origem: " + a[i].origem().id() + "\nDestino: " + a[i].destino().id() + "\nPeso: "
						+ a[i].peso() + "\nTipo: " + ta[i] + "\n\n");
			}
			painel.append("Tempo: " + (tempoDfs + tempoConstruirGrafo) + " mS");

		} else if (fm.isSelected()) {
			int origem = vo.getSelectedIndex();
			int destino = vd.getSelectedIndex();
			if (origem == destino)
				painel.append("Selecione um destino diferente da origem");
			else {
				long tempoFm = System.currentTimeMillis();
				try {
					Aresta[] r = algoritmos.fluxoMaximo(origem, destino);
					tempoFm = System.currentTimeMillis() - tempoFm;
					int tam = r.length;
					long fluxo = 0;
					for (int i = 0; i < tam; i++) {
						if (r[i].getResiduo() != r[i].peso()) {
							double fluxoAtual = r[i].peso() - r[i].getResiduo();
							if(r[i].destino().id() == destino)
								fluxo += fluxoAtual;
							painel.append(
									"Origem: " + r[i].origem().id() + "\nDestino: " + r[i].destino().id() + "\nPeso: "
											+ r[i].peso() + "\nFluxo: " + fluxoAtual + "\n\n");
						}
					}
					painel.append(
							"Fluxo maximo: " + fluxo + "\n" + "Tempo: " + (tempoFm + tempoConstruirGrafo) + " mS");
				} catch (Exception e) {
					painel.append("Não existe caminho entre origem e destino informados");
				}
			}
		}
	}

	private void agmActionPerformed(java.awt.event.ActionEvent evt) {
		vd.removeAll();
		vo.removeAll();
	}

	private void cmActionPerformed(java.awt.event.ActionEvent evt) {
		Vertice[] v = algoritmos.getGrafo().vertices();
		if (vd.getItemCount() == 0) {
			v = algoritmos.getGrafo().vertices();
			for (Vertice vertice : v)
				vd.add(Integer.toString(vertice.id()));
		}
		if (vo.getItemCount() == 0) {
			v = algoritmos.getGrafo().vertices();
			for (Vertice vertice : v)
				vo.add(Integer.toString(vertice.id()));
		}
	}

	private void dfsActionPerformed(java.awt.event.ActionEvent evt) {
		vd.removeAll();
		if (vo.getItemCount() == 0) {
			Vertice[] v = algoritmos.getGrafo().vertices();
			for (Vertice vertice : v)
				vo.add(Integer.toString(vertice.id()));
		}
	}

	private void bfsActionPerformed(java.awt.event.ActionEvent evt) {
		vd.removeAll();
		if (vo.getItemCount() == 0) {
			Vertice[] v = algoritmos.getGrafo().vertices();
			for (Vertice vertice : v)
				vo.add(Integer.toString(vertice.id()));
		}
	}

	private void fmActionPerformed(java.awt.event.ActionEvent evt) {
		Vertice[] v = algoritmos.getGrafo().vertices();
		if (vd.getItemCount() == 0) {
			v = algoritmos.getGrafo().vertices();
			for (Vertice vertice : v)
				vd.add(Integer.toString(vertice.id()));
		}
		if (vo.getItemCount() == 0) {
			v = algoritmos.getGrafo().vertices();
			for (Vertice vertice : v)
				vo.add(Integer.toString(vertice.id()));
		}
	}

	/**
	 * @param args the command line arguments
	 */

	// Variables declaration - do not modify
	private javax.swing.JRadioButton agm;
	private javax.swing.JRadioButton bfs;
	private javax.swing.ButtonGroup buttonGroup1;
	private javax.swing.JRadioButton cm;
	private javax.swing.JRadioButton dfs;
	private javax.swing.JRadioButton fm;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JTextArea painel;
	private javax.swing.JButton ok;
	private javax.swing.JScrollPane terminal;
	private java.awt.Choice vd;
	private java.awt.Choice vo;
	// End of variables declaration
}
